# -*- coding: utf-8 -*-
"""Sentiment_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W5jUoE3-TT_BkwFWuL_0Mz2LcdEyc2Mp
"""

import numpy as np
import pandas as pd
from numpy import math
import seaborn as sns
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

df= pd.read_csv("/content/drive/MyDrive/Restaurant_Reviews.tsv", delimiter='\t',quoting=3)

df.head()

df.shape

df.info()

df['Liked'].describe()

df['Liked'].value_counts()

df.describe().T

df.describe(include="object").T

df['length']=df['Review'].apply(len)
df.head()

df[df['length']==100]['Review'].iloc[0]

import nltk
nltk.download('stopwords')

import string
from nltk.corpus import stopwords

stopwords.words('english')

[punc for punc in string.punctuation]

def text_process(msg):
  nopunc = [char for char in msg if char not in string.punctuation]
  nopunc=''.join(nopunc)
  return ' '. join([word for word in nopunc.split() if word.lower() not in stopwords.words('english')])

df.head()

df['tokenized_Review'] = df['Review'].apply(text_process)

df.head()

from wordcloud import WordCloud
import matplotlib.pyplot as plt
word_cloud = df.loc[df['Liked']==1, :]
text = ' '.join([text for text in word_cloud['Review']])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
plt.figure(figsize=(10,5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

#Negative Comment
#importing the Library

from wordcloud import WordCloud
import matplotlib.pyplot as plt
word_cloud = df.loc[df['Liked'] == 0, :]
text = ' '.join([text for text in word_cloud['Review']])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)
plt.figure(figsize=(10,8))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

from sklearn.feature_extraction.text import CountVectorizer

from sklearn.feature_extraction.text import TfidfVectorizer

vectorizer = CountVectorizer(max_df = 0.9, min_df = 10)
X = vectorizer.fit_transform(df['tokenized_Review']).toarray()

X

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(df['tokenized_Review'],df['Liked'],random_state =107, test_size=0.2)

X_train.head()

train_vectorized =vectorizer.transform(X_train)
test_vectorized =vectorizer.transform(X_test)

X_train_array =train_vectorized.toarray()
X_test_array = test_vectorized.toarray()

from sklearn.naive_bayes import GaussianNB
nb = GaussianNB()
nb.fit(X_train_array , y_train)

y_train_preds_nb = nb.predict(X_train_array)
y_test_preds_nb = nb.predict(X_test_array)

y_test_preds_nb

y_test

pd.DataFrame({'actual_y_value': y_test, "predicted_y_value":y_test_preds_nb})

from sklearn.metrics import accuracy_score, recall_score , precision_score, f1_score, roc_auc_score, confusion_matrix, roc_curve, auc, classification_report

def print_metrics(actual , predicted):
  print('accuracy_score is_{}'.format(accuracy_score(actual, predicted)))
  print('precision_score is {}'.format( precision_score(actual ,predicted)))
  print('recall_score is {}'.format(recall_score(actual, predicted)))
  print ('f1_score is {}'. format(f1_score(actual , predicted)))
  print('roc_auc_score is {}'. format(roc_auc_score(actual , predicted)))
  print('confusion_matrix is {}'. format(confusion_matrix(actual , predicted)))
  print ('classification_report is {}'.format(classification_report(actual , predicted)))

#Evalutaion of the training model
print_metrics(y_train , y_train_preds_nb)

#Evaluation of testing model
print_metrics(y_test , y_test_preds_nb)

from sklearn.naive_bayes import MultinomialNB

# Model Generating Using the Multinomial Nayes Bayes
mnv = MultinomialNB()
mnv.fit(X_train_array , y_train)

y_train_preds_mnv = mnv.predict(X_train_array)
y_test_preds_mnv = mnv.predict(X_test_array)

y_test_preds_mnv

#Evalutaion of the training model
print_metrics(y_train , y_train_preds_nb)

#Evaluation of testing model
print_metrics(y_test , y_test_preds_nb)

# Hyper parameter Tuning

best_accuracy =0.0
alpha_val = 0

for i in np.arange(0.01,1.1,0.1):
  temp_cls = MultinomialNB(alpha=i)
  temp_cls.fit(X_train_array , y_train)
  y_test_pred_h_nbayes = temp_cls.predict(X_test_array)
  score = accuracy_score(y_test , y_test_pred_h_nbayes)
  print("accuracy score for alpha-{} is :{}%".format(round(i,1),round(score*100,2)))

  if score>best_accuracy:
    best_accuracy = score
    alpha_val=i
print(".............................................")
print("the best accuracy is {}% with alpha values as {}".format(round(best_accuracy*100,2),round(alpha_val,1)))